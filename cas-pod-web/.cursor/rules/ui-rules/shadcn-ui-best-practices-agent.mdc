---
description: 
globs: 
alwaysApply: true
---
 ---
description: Best practices for working with Shadcn UI in projects
globs: 
alwaysApply: false
---

# Shadcn UI Best Practices

## Context

- Apply when working with any Shadcn UI components
- Used for ensuring maintainability and scalability
- Ensures consistency across the project

## Critical Rules

- Create component variants using the cva (class-variance-authority) pattern
- Keep components modular and composable
- Maintain UI component folder structure (ui/, components/)
- Follow Shadcn UI naming conventions
- Use the registry pattern for complex projects
- Implement components only as needed, not all at once
- Document custom component variations
- Keep default component behavior intact when extending

## Examples

<example>
// Proper component variant creation
import { cva } from "class-variance-authority"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input hover:bg-accent hover:text-accent-foreground",
        // Custom variant
        brand: "bg-brand-500 text-white hover:bg-brand-600",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

// Proper component directory structure
/components
  /ui
    /button
      /button.tsx
      /index.ts
  /custom
    /marketing-button.tsx
</example>

<example type="invalid">
// Incorrect - Not using cva for variants
const Button = ({ variant, ...props }) => {
  let className = "base-button-class";
  if (variant === "primary") className += " primary-class";
  if (variant === "secondary") className += " secondary-class";
  return <button className={className} {...props} />;
};

// Incorrect - Mixing Shadcn UI with other UI libraries
import { Button } from "@/components/ui/button";
import { Card } from "material-ui";

// Incorrect - Inconsistent component structure
/components
  /Button.tsx
  /ui
    /Card.tsx
  /shadcn
    /toast.tsx
</example>